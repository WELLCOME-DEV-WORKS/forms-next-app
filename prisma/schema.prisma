// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  image       String?
  roles       UserRole[]    @default([USER])
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
  Vote        Vote[]
  Form        Form[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  @@index([name])
}

model Post {
  id         String    @id @default(cuid())
  title      String
  content    Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  votes    Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post     Post   @relation(fields: [postId], references: [id])
  postId   String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  type   VoteType
  formId String?

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model Form {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  wantsSkinImprovement     Boolean
  wantsSkinToneImprovement Boolean
  wantsAcneTreatment       Boolean
  wantsImmediateEffect     Boolean
  wantsShortRecovery       Boolean
  wantsBudgetBelow100      Boolean
  wantsLessIntensive       Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
